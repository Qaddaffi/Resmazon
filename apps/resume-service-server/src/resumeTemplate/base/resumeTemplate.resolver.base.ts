/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ResumeTemplate } from "./ResumeTemplate";
import { ResumeTemplateCountArgs } from "./ResumeTemplateCountArgs";
import { ResumeTemplateFindManyArgs } from "./ResumeTemplateFindManyArgs";
import { ResumeTemplateFindUniqueArgs } from "./ResumeTemplateFindUniqueArgs";
import { CreateResumeTemplateArgs } from "./CreateResumeTemplateArgs";
import { UpdateResumeTemplateArgs } from "./UpdateResumeTemplateArgs";
import { DeleteResumeTemplateArgs } from "./DeleteResumeTemplateArgs";
import { CommentFindManyArgs } from "../../comment/base/CommentFindManyArgs";
import { Comment } from "../../comment/base/Comment";
import { LikeFindManyArgs } from "../../like/base/LikeFindManyArgs";
import { Like } from "../../like/base/Like";
import { PurchaseHistoryFindManyArgs } from "../../purchaseHistory/base/PurchaseHistoryFindManyArgs";
import { PurchaseHistory } from "../../purchaseHistory/base/PurchaseHistory";
import { ResumeTemplateService } from "../resumeTemplate.service";
@graphql.Resolver(() => ResumeTemplate)
export class ResumeTemplateResolverBase {
  constructor(protected readonly service: ResumeTemplateService) {}

  async _resumeTemplatesMeta(
    @graphql.Args() args: ResumeTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ResumeTemplate])
  async resumeTemplates(
    @graphql.Args() args: ResumeTemplateFindManyArgs
  ): Promise<ResumeTemplate[]> {
    return this.service.resumeTemplates(args);
  }

  @graphql.Query(() => ResumeTemplate, { nullable: true })
  async resumeTemplate(
    @graphql.Args() args: ResumeTemplateFindUniqueArgs
  ): Promise<ResumeTemplate | null> {
    const result = await this.service.resumeTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ResumeTemplate)
  async createResumeTemplate(
    @graphql.Args() args: CreateResumeTemplateArgs
  ): Promise<ResumeTemplate> {
    return await this.service.createResumeTemplate({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ResumeTemplate)
  async updateResumeTemplate(
    @graphql.Args() args: UpdateResumeTemplateArgs
  ): Promise<ResumeTemplate | null> {
    try {
      return await this.service.updateResumeTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ResumeTemplate)
  async deleteResumeTemplate(
    @graphql.Args() args: DeleteResumeTemplateArgs
  ): Promise<ResumeTemplate | null> {
    try {
      return await this.service.deleteResumeTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Comment], { name: "comments" })
  async findComments(
    @graphql.Parent() parent: ResumeTemplate,
    @graphql.Args() args: CommentFindManyArgs
  ): Promise<Comment[]> {
    const results = await this.service.findComments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Like], { name: "likes" })
  async findLikes(
    @graphql.Parent() parent: ResumeTemplate,
    @graphql.Args() args: LikeFindManyArgs
  ): Promise<Like[]> {
    const results = await this.service.findLikes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [PurchaseHistory], { name: "purchaseHistories" })
  async findPurchaseHistories(
    @graphql.Parent() parent: ResumeTemplate,
    @graphql.Args() args: PurchaseHistoryFindManyArgs
  ): Promise<PurchaseHistory[]> {
    const results = await this.service.findPurchaseHistories(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
