/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PurchaseHistory as PrismaPurchaseHistory,
  ResumeTemplate as PrismaResumeTemplate,
  User as PrismaUser,
} from "@prisma/client";

export class PurchaseHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PurchaseHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.purchaseHistory.count(args);
  }

  async purchaseHistories(
    args: Prisma.PurchaseHistoryFindManyArgs
  ): Promise<PrismaPurchaseHistory[]> {
    return this.prisma.purchaseHistory.findMany(args);
  }
  async purchaseHistory(
    args: Prisma.PurchaseHistoryFindUniqueArgs
  ): Promise<PrismaPurchaseHistory | null> {
    return this.prisma.purchaseHistory.findUnique(args);
  }
  async createPurchaseHistory(
    args: Prisma.PurchaseHistoryCreateArgs
  ): Promise<PrismaPurchaseHistory> {
    return this.prisma.purchaseHistory.create(args);
  }
  async updatePurchaseHistory(
    args: Prisma.PurchaseHistoryUpdateArgs
  ): Promise<PrismaPurchaseHistory> {
    return this.prisma.purchaseHistory.update(args);
  }
  async deletePurchaseHistory(
    args: Prisma.PurchaseHistoryDeleteArgs
  ): Promise<PrismaPurchaseHistory> {
    return this.prisma.purchaseHistory.delete(args);
  }

  async getResumeTemplate(
    parentId: string
  ): Promise<PrismaResumeTemplate | null> {
    return this.prisma.purchaseHistory
      .findUnique({
        where: { id: parentId },
      })
      .resumeTemplate();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.purchaseHistory
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
