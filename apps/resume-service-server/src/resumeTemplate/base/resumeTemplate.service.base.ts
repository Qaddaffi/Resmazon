/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ResumeTemplate as PrismaResumeTemplate,
  Comment as PrismaComment,
  Like as PrismaLike,
  PurchaseHistory as PrismaPurchaseHistory,
} from "@prisma/client";

export class ResumeTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ResumeTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.resumeTemplate.count(args);
  }

  async resumeTemplates(
    args: Prisma.ResumeTemplateFindManyArgs
  ): Promise<PrismaResumeTemplate[]> {
    return this.prisma.resumeTemplate.findMany(args);
  }
  async resumeTemplate(
    args: Prisma.ResumeTemplateFindUniqueArgs
  ): Promise<PrismaResumeTemplate | null> {
    return this.prisma.resumeTemplate.findUnique(args);
  }
  async createResumeTemplate(
    args: Prisma.ResumeTemplateCreateArgs
  ): Promise<PrismaResumeTemplate> {
    return this.prisma.resumeTemplate.create(args);
  }
  async updateResumeTemplate(
    args: Prisma.ResumeTemplateUpdateArgs
  ): Promise<PrismaResumeTemplate> {
    return this.prisma.resumeTemplate.update(args);
  }
  async deleteResumeTemplate(
    args: Prisma.ResumeTemplateDeleteArgs
  ): Promise<PrismaResumeTemplate> {
    return this.prisma.resumeTemplate.delete(args);
  }

  async findComments(
    parentId: string,
    args: Prisma.CommentFindManyArgs
  ): Promise<PrismaComment[]> {
    return this.prisma.resumeTemplate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comments(args);
  }

  async findLikes(
    parentId: string,
    args: Prisma.LikeFindManyArgs
  ): Promise<PrismaLike[]> {
    return this.prisma.resumeTemplate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .likes(args);
  }

  async findPurchaseHistories(
    parentId: string,
    args: Prisma.PurchaseHistoryFindManyArgs
  ): Promise<PrismaPurchaseHistory[]> {
    return this.prisma.resumeTemplate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchaseHistories(args);
  }
}
