/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PurchaseHistoryService } from "../purchaseHistory.service";
import { PurchaseHistoryCreateInput } from "./PurchaseHistoryCreateInput";
import { PurchaseHistory } from "./PurchaseHistory";
import { PurchaseHistoryFindManyArgs } from "./PurchaseHistoryFindManyArgs";
import { PurchaseHistoryWhereUniqueInput } from "./PurchaseHistoryWhereUniqueInput";
import { PurchaseHistoryUpdateInput } from "./PurchaseHistoryUpdateInput";

export class PurchaseHistoryControllerBase {
  constructor(protected readonly service: PurchaseHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PurchaseHistory })
  async createPurchaseHistory(
    @common.Body() data: PurchaseHistoryCreateInput
  ): Promise<PurchaseHistory> {
    return await this.service.createPurchaseHistory({
      data: {
        ...data,

        resumeTemplate: data.resumeTemplate
          ? {
              connect: data.resumeTemplate,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        pricePaid: true,
        paymentMethod: true,

        resumeTemplate: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PurchaseHistory] })
  @ApiNestedQuery(PurchaseHistoryFindManyArgs)
  async purchaseHistories(
    @common.Req() request: Request
  ): Promise<PurchaseHistory[]> {
    const args = plainToClass(PurchaseHistoryFindManyArgs, request.query);
    return this.service.purchaseHistories({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        pricePaid: true,
        paymentMethod: true,

        resumeTemplate: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PurchaseHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async purchaseHistory(
    @common.Param() params: PurchaseHistoryWhereUniqueInput
  ): Promise<PurchaseHistory | null> {
    const result = await this.service.purchaseHistory({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        pricePaid: true,
        paymentMethod: true,

        resumeTemplate: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PurchaseHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePurchaseHistory(
    @common.Param() params: PurchaseHistoryWhereUniqueInput,
    @common.Body() data: PurchaseHistoryUpdateInput
  ): Promise<PurchaseHistory | null> {
    try {
      return await this.service.updatePurchaseHistory({
        where: params,
        data: {
          ...data,

          resumeTemplate: data.resumeTemplate
            ? {
                connect: data.resumeTemplate,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          pricePaid: true,
          paymentMethod: true,

          resumeTemplate: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PurchaseHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePurchaseHistory(
    @common.Param() params: PurchaseHistoryWhereUniqueInput
  ): Promise<PurchaseHistory | null> {
    try {
      return await this.service.deletePurchaseHistory({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          pricePaid: true,
          paymentMethod: true,

          resumeTemplate: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
