/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PurchaseHistory } from "./PurchaseHistory";
import { PurchaseHistoryCountArgs } from "./PurchaseHistoryCountArgs";
import { PurchaseHistoryFindManyArgs } from "./PurchaseHistoryFindManyArgs";
import { PurchaseHistoryFindUniqueArgs } from "./PurchaseHistoryFindUniqueArgs";
import { CreatePurchaseHistoryArgs } from "./CreatePurchaseHistoryArgs";
import { UpdatePurchaseHistoryArgs } from "./UpdatePurchaseHistoryArgs";
import { DeletePurchaseHistoryArgs } from "./DeletePurchaseHistoryArgs";
import { ResumeTemplate } from "../../resumeTemplate/base/ResumeTemplate";
import { User } from "../../user/base/User";
import { PurchaseHistoryService } from "../purchaseHistory.service";
@graphql.Resolver(() => PurchaseHistory)
export class PurchaseHistoryResolverBase {
  constructor(protected readonly service: PurchaseHistoryService) {}

  async _purchaseHistoriesMeta(
    @graphql.Args() args: PurchaseHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PurchaseHistory])
  async purchaseHistories(
    @graphql.Args() args: PurchaseHistoryFindManyArgs
  ): Promise<PurchaseHistory[]> {
    return this.service.purchaseHistories(args);
  }

  @graphql.Query(() => PurchaseHistory, { nullable: true })
  async purchaseHistory(
    @graphql.Args() args: PurchaseHistoryFindUniqueArgs
  ): Promise<PurchaseHistory | null> {
    const result = await this.service.purchaseHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PurchaseHistory)
  async createPurchaseHistory(
    @graphql.Args() args: CreatePurchaseHistoryArgs
  ): Promise<PurchaseHistory> {
    return await this.service.createPurchaseHistory({
      ...args,
      data: {
        ...args.data,

        resumeTemplate: args.data.resumeTemplate
          ? {
              connect: args.data.resumeTemplate,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PurchaseHistory)
  async updatePurchaseHistory(
    @graphql.Args() args: UpdatePurchaseHistoryArgs
  ): Promise<PurchaseHistory | null> {
    try {
      return await this.service.updatePurchaseHistory({
        ...args,
        data: {
          ...args.data,

          resumeTemplate: args.data.resumeTemplate
            ? {
                connect: args.data.resumeTemplate,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PurchaseHistory)
  async deletePurchaseHistory(
    @graphql.Args() args: DeletePurchaseHistoryArgs
  ): Promise<PurchaseHistory | null> {
    try {
      return await this.service.deletePurchaseHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => ResumeTemplate, {
    nullable: true,
    name: "resumeTemplate",
  })
  async getResumeTemplate(
    @graphql.Parent() parent: PurchaseHistory
  ): Promise<ResumeTemplate | null> {
    const result = await this.service.getResumeTemplate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: PurchaseHistory
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
